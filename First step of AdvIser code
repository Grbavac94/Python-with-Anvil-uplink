import anvil.server
anvil.server.connect("A3GFP26OWQXTXK42AQIYDHLI-5Q2GMRSZYQEXBNPE")
from ._anvil_designer import Form1Template
from anvil import *
import anvil.server
import anvil.tables as tables
import anvil.tables.query as q
from anvil.tables import app_tables
from anvil.js import mapboxgl, MapboxGeocoder
import anvil.js
import anvil.http





class Form1(Form1Template):

  def __init__(self, **properties):
    # Set Form properties and Data Bindings.
    self.init_components(**properties)
    self.time_dropdown.items = [("10 minuta","10"),("20 minuta","20"),("30 minuta","30")]
    self.label_1.text = anvil.server.call('say_hello', "AdvIser")
  def form_show(self, **event_args):
    """This method is called when the HTML panel is shown on the screen"""
    mapboxgl.accessToken = 'pk.eyJ1IjoiZ3JiYXZhYyIsImEiOiJjbGFyMW8xYzcxYWtvM29ucHB4eWMxZHdoIn0.uax4ypwEgGXqiIsgxz2YZA'
    self.map = mapboxgl.Map({
    'container': anvil.js.get_dom_node(self.spacer_1),
    'style': 'mapbox://styles/branimirb/clay38f1000kt14mptim3hq5f',
    'center': [17.161657607704452,45.414261631038954],
    'zoom': 16 
    })
    #Set marker options.
    self.marker = mapboxgl.Marker({
        'color': "red",
        'draggable': True}).setLngLat([17.161657607704452,45.414261631038954]).addTo(self.map);

    self.geocoder = MapboxGeocoder({'accessToken': mapboxgl.accessToken, 'marker':False})
    self.map.addControl(self.geocoder)

    self.geocoder.on('result',self.move_marker)
    self.marker.on('drag', self.get_iso)

  def move_marker (self, result):
    lnglat = result['result']['geometry']['coordinates']
    self.marker.setLngLat(lnglat)
    self.get_iso()

  def get_iso(self, *args):

    lnglat = self.marker.getLngLat()
    response = anvil.http.request(f'http://api.mapbox.com/isochrone/v1/mapbox/{self.profile_dropdown.selected_value}/{lnglat.lng},{lnglat.lat}?contours_minutes={self.time_dropdown.selected_value}&polygons=true&access_token=pk.eyJ1IjoiZ3JiYXZhYyIsImEiOiJjbGFyMW8xYzcxYWtvM29ucHB4eWMxZHdoIn0.uax4ypwEgGXqiIsgxz2YZA', json=True)

   if not self.map.getSource('iso')
      self.map.addSource('iso', {
      'type': 'geojson',
      'data': {
      'type': 'FeatureCollection',
      'features': []
      }});

      self.map.addLayer({
          'id': 'isoLayer',
          'type': 'fill',
          'source': 'iso',
          'layout': {},
          'paint': {
            'fill-color': '#5a3fc0',
            'fill-opacity': 0.3}},'poi-label');

    self.map.getSource('iso').setData(response)




  def time_dropdown_change(self, **event_args):
      """This method is called when an item is selected"""
     self.get_iso()

  def profile_dropdown_change(self, **event_args):
      """This method is called when an item is selected"""
